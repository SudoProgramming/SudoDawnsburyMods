using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Dawnsbury.Core.CharacterBuilder.FeatsDb.Common;
using Dawnsbury.Core.CombatActions;
using Dawnsbury.Core.Creatures;
using Dawnsbury.Core.Creatures.Parts;
using Dawnsbury.Core.Mechanics;
using Dawnsbury.Core.Mechanics.Core;
using Dawnsbury.Core.Mechanics.Damage;
using Dawnsbury.Core.Mechanics.Enumerations;
using Dawnsbury.Core.Roller;
using Dawnsbury.Display;
using Dawnsbury.Mods.Feats.Classes.Thaumaturge.RegisteredComponents;

namespace Dawnsbury.Mods.Feats.Classes.Thaumaturge
{
    public class ExploitEffect : QEffect
    {
        public Creature Target { get; set; }

        public DamageKind ExploitedDamageKind { get; set; }

        public ExploitEffect(Creature owner, Creature defender, Resistance? weakness = null, int antithesisAmount = -1, bool applyToAll = false) : base()
        {
            this.Owner = owner;
            this.ExpiresAt = ExpirationCondition.Never;
            this.Id = ThaumaturgeQEIDs.ExploitVulnerabilityWeakness;
            this.Tag = defender;
            this.Illustration = ThaumaturgeModdedIllustrations.ExploitVulnerabilityBackground;
            this.Name = "Exploit Vulnerability";
            this.Target = defender;
            if (weakness != null)
            {
                this.Description = "Exploiting Weakness to all " + defender.BaseName + " - " + weakness.DamageKind.HumanizeTitleCase2() + " " + weakness.Value;
                this.AddExtraKindedDamageOnStrike = (CombatAction action, Creature damageTarget) =>
                {
                    if ((damageTarget == defender || damageTarget.BaseName == defender.BaseName) || (applyToAll && damageTarget.WeaknessAndResistance.Weaknesses.Any(weak => weak.DamageKind == weakness.DamageKind)))
                    {
                        return new KindedDamage(DiceFormula.FromText("0", "Exploit Vulnerability " + (applyToAll ? "(Sympathetic Vulnerabilities)" : string.Empty) + "- Weakness " + weakness.DamageKind), weakness.DamageKind);
                    }

                    return null;
                };
                this.ExploitedDamageKind = weakness.DamageKind;
            }
            else
            {
                this.Description = "Exploiting Weakness to " + (applyToAll ? "all " + defender.BaseName : defender.Name) +  " - " + ThaumaturgeDamageKinds.PersonalAntithesis.HumanizeTitleCase2() + " " + antithesisAmount;
                this.AddExtraKindedDamageOnStrike = (CombatAction action, Creature damageTarget) =>
                {
                    if (damageTarget == defender || (applyToAll && damageTarget.BaseName == defender.BaseName))
                    {
                        return new KindedDamage(DiceFormula.FromText("0", "Exploit Vulnerability " + (applyToAll ? "(Sympathetic Vulnerabilities)" : string.Empty) + "- " + ThaumaturgeDamageKinds.PersonalAntithesis.HumanizeTitleCase2()), ThaumaturgeDamageKinds.PersonalAntithesis);
                    }

                    return null;
                };
                this.ExploitedDamageKind = ThaumaturgeDamageKinds.PersonalAntithesis;
            }

            if (owner.HasFeat(ThaumaturgeFeatNames.MagicalExploits))
            {
                this.YouDealDamageEvent = async (QEffect qfDamageEvent, DamageEvent damageEvent) =>
                {
                    Creature attacker = qfDamageEvent.Owner;
                    CombatAction? action = damageEvent.CombatAction;
                    Creature damageTarget = damageEvent.TargetCreature;

                    if (action != null && attacker.HasFeat(ThaumaturgeFeatNames.MagicalExploits) && action.CheckResult >= CheckResult.Success && action.HasTrait(Trait.Spell) && !action.HasTrait(Trait.SustainASpell) && action.HasTrait(Trait.Attack))
                    {
                        if (weakness != null)
                        {
                            if ((damageTarget == defender || damageTarget.BaseName == defender.BaseName) || (applyToAll && damageTarget.WeaknessAndResistance.Weaknesses.Any(weak => weak.DamageKind == weakness.DamageKind)))
                            {
                                damageEvent.KindedDamages.Add(new KindedDamage(DiceFormula.FromText("0", "Magical Explits"), weakness.DamageKind));
                            }
                        }
                        else
                        {
                            if (damageTarget == defender || (applyToAll && damageTarget.BaseName == defender.BaseName))
                            {
                                damageEvent.KindedDamages.Add(new KindedDamage(DiceFormula.FromText("0", "Magical Explits"), ThaumaturgeDamageKinds.PersonalAntithesis));
                            }
                        }
                    }
                };
            }
        }
    }
}
