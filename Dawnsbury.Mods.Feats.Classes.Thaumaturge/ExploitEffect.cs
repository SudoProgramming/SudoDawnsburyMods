using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Dawnsbury.Core.CombatActions;
using Dawnsbury.Core.Creatures;
using Dawnsbury.Core.Creatures.Parts;
using Dawnsbury.Core.Mechanics;
using Dawnsbury.Core.Mechanics.Damage;
using Dawnsbury.Core.Mechanics.Enumerations;
using Dawnsbury.Core.Roller;
using Dawnsbury.Display;
using Dawnsbury.Mods.Feats.Classes.Thaumaturge.RegisteredComponents;

namespace Dawnsbury.Mods.Feats.Classes.Thaumaturge
{
    public class ExploitEffect : QEffect
    {
        public Creature Target { get; set; }

        public DamageKind ExploitedDamageKind { get; set; }

        public ExploitEffect(Creature defender, Resistance? weakness = null, int antithesisAmount = -1) : base()
        {
            this.ExpiresAt = ExpirationCondition.Never;
            this.Id = ThaumaturgeQEIDs.ExploitVulnerabilityWeakness;
            this.Tag = defender;
            this.Illustration = ThaumaturgeModdedIllustrations.ExploitVulnerabilityBackground;
            this.Name = "Exploit Vulnerability";
            this.Target = defender;
            if (weakness != null)
            {
                this.Description = "Exploiting Weakness to all " + defender.BaseName + " - " + weakness.DamageKind.HumanizeTitleCase2() + " " + weakness.Value;
                this.AddExtraKindedDamageOnStrike = (CombatAction action, Creature damageTarget) =>
                {
                    if (damageTarget == defender || damageTarget.BaseName == defender.BaseName)
                    {
                        return new KindedDamage(DiceFormula.FromText("0", "Exploit Vulnerability - Weakness " + weakness.DamageKind), weakness.DamageKind);
                    }

                    return null;
                };
                this.ExploitedDamageKind = weakness.DamageKind;
            }
            else
            {
                this.Description = "Exploiting Weakness to " + defender.Name + " - " + ThaumaturgeDamageKinds.PersonalAntithesis.HumanizeTitleCase2() + " " + antithesisAmount;
                this.AddExtraKindedDamageOnStrike = (CombatAction action, Creature damageTarget) =>
                {
                    if (damageTarget == defender)
                    {
                        return new KindedDamage(DiceFormula.FromText("0", "Exploit Vulnerability - " + ThaumaturgeDamageKinds.PersonalAntithesis.HumanizeTitleCase2()), ThaumaturgeDamageKinds.PersonalAntithesis);
                    }

                    return null;
                };
                this.ExploitedDamageKind = ThaumaturgeDamageKinds.PersonalAntithesis;
            }
        }
    }
}
